	
    fp = fopen("default.map", "r");
	if (!fp) {
        printf("Map profile could not be opened.");
        return 0;
    }
	while (!feof(fp)) {


		//fscanf("%d %d %d %d %d %d", map->eventType, map->eventCode, map->eventValue, map->result[0],map->result[1],map->result[2]);
		//printf("Read: %d, %d, %d, %d, %d, %d\n",map->eventType, map->eventCode, map->eventValue, map->result[0],map->result[1],map->result[2]);
		i++;
	}
	fclose(fp);

	// don't forget to not hardcode this!!!
	/*
	fd_i = open("/dev/input/event21", O_RDONLY);
	fd_o = open("/dev/uinput", O_WRONLY | O_NONBLOCK);
	if (fd_i < 0) {
        printf("Input could not be opened.");
        return 0;
    }
	if (fd_o < 0) {
        printf("Output (uinput) could not be opened. Are you root?");
        return 0;
    }

    
		//keyMap *map = malloc(sizeof(keyMap));
		if (map == NULL) {
			printf("Map was not allocated.");
		}
		printf("Map allocated.");

	/*createVirtualInput(fd_o);
	printf("uinput initialized\n");

	while (1) {
		read(fd_i, &data, sizeof(struct input_event));
		printf("Event read. type:%d code:%d value:%x\n", data.type, data.code, data.value);
		printf("________________________\n");

	}*/

	getchar();

	//multiple keys can be sent with just one report for press and release each
   	/*emit(fd_o, EV_KEY, KEY_LEFTSHIFT, 1);
	emit(fd_o, EV_KEY, KEY_M, 1);
	emit(fd_o, EV_SYN, SYN_REPORT, 0);
   	emit(fd_o, EV_KEY, KEY_M, 0);
    emit(fd_o, EV_KEY, KEY_LEFTSHIFT, 0);
   	emit(fd_o, EV_SYN, SYN_REPORT, 0);*/
	//read(fd, &data, sizeof(data));
	//printf("%s", data.value);

	/*int sendData[2] = {KEY_LEFTSHIFT, KEY_M};
	printf("Sending chars: %d and %d\n", sendData[0], sendData[1]);
	sendChars(fd_o, sendData, 2);

	getchar();

	sendData[0] = KEY_M;
	printf("Sending chars: %d\n", sendData[0]);
	sendChars(fd_o, sendData, 1);*/

	getchar();



	close(fd_i);
	ioctl(fd_o, UI_DEV_DESTROY);
	close(fd_o);











	    fp = fopen("default.map", "r");
	if (!fp) {
        printf("Map profile could not be opened.");
        return 0;
    }
	while (!feof(fp)) {
		keyMap *mapPtr = malloc(sizeof(keyMap));

		keyMap map;
		fscanf(fp, "%d%d%d%d%d%d", &(map.eventType),&(map.eventCode),&(map.eventValue),&(map.result[0]),&(map.result[1]),&(map.result[2]));
		//printf("Read: %d %d %d %d %d %d\n", map.eventType, map.eventCode, map.eventValue, map.result[0], map.result[1], map.result[2]);
		memcpy(mapPtr, &map, sizeof(keyMap));
		//printf("Copied: %d %d %d %d %d %d\n", mapPtr->eventType, mapPtr->eventCode, mapPtr->eventValue, mapPtr->result[0], mapPtr->result[1], mapPtr->result[2]);

		mapsPtr[mapCount] = mapPtr;
		mapCount++;
	}